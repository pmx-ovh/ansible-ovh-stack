# roles/proxmox-bastion/tasks/main.yml

- name: Vérifier si la clé SSH du bastion existe
  ansible.builtin.stat:
    path: "{{ bastion_key_path }}"
  register: bastion_key_stat

- name: Générer une clé SSH pour le bastion si absente
  ansible.builtin.openssh_keypair:
    path: "{{ bastion_key_path }}"
    type: ed25519
    size: 256
  when: not bastion_key_stat.stat.exists

- name: Récupérer la clé publique du bastion
  ansible.builtin.slurp:
    src: "{{ bastion_key_path }}.pub"
  register: bastion_pub_key

- name: Définir la clé publique du bastion comme variable
  set_fact:
    bastion_pub_key_content: "{{ bastion_pub_key.content | b64decode }}"

# ========================
# Créer script temporaire pour SSH key sur VMs sans Cloud-Init
# ========================
- name: "Créer script temporaire pour SSH key"
  copy:
    dest: "/tmp/add_ssh_key.sh"
    content: |
      #!/bin/bash
      mkdir -p /root/.ssh
      echo "{{ bastion_ssh_pub }}" >> /root/.ssh/authorized_keys
      chmod 600 /root/.ssh/authorized_keys
    mode: '0700'

# ========================
# Démarrer les VMs
# ========================
- name: "Démarrer les VMs"
  community.general.proxmox_kvm:
    api_host: "{{ proxmox_api_host }}"
    api_user: "{{ proxmox_api_user }}"
    api_token_id: "{{ pmx_api_token_id }}"
    api_token_secret: "{{ pmx_api_token_secret }}"
    node: "{{ pmx_node }}"
    vmid: "{{ item.vmid }}"
    state: started
  loop: "{{ proxmox_vms }}"
  loop_control:
    label: "{{ item.name }}"
  delegate_to: localhost

# ========================
# Ajouter clé SSH sur VM sans Cloud-Init
# ========================
- name: "Ajouter clé SSH sur VM sans Cloud-Init"
  shell: "qm guest exec {{ item.vmid }} -- /bin/bash /tmp/add_ssh_key.sh"
  loop: "{{ proxmox_vms | selectattr('cloudinit','equalto',false) | list }}"
  loop_control:
    label: "{{ item.name }}"