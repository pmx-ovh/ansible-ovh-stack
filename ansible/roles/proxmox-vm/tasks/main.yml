---
# ==========================================
# 0. Vérifier / générer clé SSH du bastion
# ==========================================
- name: Vérifier si la clé SSH du bastion existe
  stat:
    path: "{{ bastion_key_path }}"
  register: bastion_key_stat

- name: Générer clé SSH bastion si absente
  ansible.builtin.openssh_keypair:
    path: "{{ bastion_key_path }}"
    type: ed25519
    size: 256
  when: not bastion_key_stat.stat.exists

- name: Charger clé publique bastion
  slurp:
    src: "{{ bastion_key_path }}.pub"
  register: bastion_pub_key

- set_fact:
    bastion_ssh_pub: "{{ bastion_pub_key.content | b64decode }}"



# ==========================================
# 1. Cloner VM depuis template si absente
# ==========================================
- name: Cloner VM depuis template si absente
  shell: |
    if [ ! -f "/etc/pve/qemu-server/{{ vm.vmid }}.conf" ]; then
      qm clone {{ vm.template_vmid }} {{ vm.vmid }} \
        --name {{ vm.name }} \
        --full \
        --storage {{ vm.storage }} \
        --format qcow2
    fi
  args:
    executable: /bin/bash
  loop: "{{ proxmox_vms }}"
  loop_control:
    loop_var: vm
    label: "{{ vm.name }}"

# ==========================================
# 2. Configurer CPU, RAM et OS
# ==========================================
- name: Configurer CPU, RAM et OS
  shell: qm set {{ vm.vmid }} --cores {{ vm.cores }} --memory {{ vm.memory }} --ostype {{ vm.ostype }}
  loop: "{{ proxmox_vms }}"
  loop_control:
    loop_var: vm
    label: "{{ vm.name }}"

# ==========================================
# 3. Configurer interfaces réseau
# ==========================================
- name: Configurer interfaces réseau
  shell: |
    {% for net_name, net_conf in vm.net.items() %}
    qm set {{ vm.vmid }} --{{ net_name }} {{ net_conf }}
    {% endfor %}
  loop: "{{ proxmox_vms }}"
  loop_control:
    loop_var: vm
    label: "{{ vm.name }}"

# ==========================================
# 4. Configurer Cloud-Init si activé
# ==========================================
- name: Ajouter lecteur Cloud-Init si absent
  shell: |
    if ! qm config {{ vm.vmid }} | grep -q '^ide2:'; then
      qm set {{ vm.vmid }} --ide2 {{ vm.storage }}:cloudinit
    fi
  args:
    executable: /bin/bash
  when: vm.cloudinit | default(false) | bool
  loop: "{{ proxmox_vms }}"
  loop_control:
    loop_var: vm
    label: "{{ vm.name }}"

- name: Configurer IP avec Cloud-Init
  shell: |
    {% for ipconf_name, ipconf_val in vm.ipconfig.items() %}
    qm set {{ vm.vmid }} --{{ ipconf_name }} {{ ipconf_val }}
    {% endfor %}
  when: vm.cloudinit | default(false)
  loop: "{{ proxmox_vms }}"
  loop_control:
    loop_var: vm
    label: "{{ vm.name }}"

# ==========================================
# 5. Configurer disque boot
# ==========================================
- name: Configurer disque et boot
  shell: |
    DISK=$(qm config {{ vm.vmid }} | grep '^scsi0:' | awk -F',' '{print $1}' | awk '{print $2}')
    if [ -n "$DISK" ]; then
      qm set {{ vm.vmid }} --scsihw virtio-scsi-pci --scsi0 $DISK --boot c --bootdisk scsi0
    fi
  loop: "{{ proxmox_vms }}"
  loop_control:
    loop_var: vm
    label: "{{ vm.name }}"

- name: Démarrer les VMs arrêtées
  shell: qm start {{ vm.vmid }}
  args:
    executable: /bin/bash
  loop: "{{ proxmox_vms }}"
  loop_control:
    loop_var: vm
    label: "{{ vm.name }}"
  failed_when: false


# ==========================================
# 7. Appliquer configuration OPNsense via rôle
# ==========================================
- name: Appliquer configuration OPNsense
  include_role:
    name: opnsense
  when: vm.template == "opnsense-template"
  loop: "{{ proxmox_vms }}"
  loop_control:
    loop_var: vm
    label: "{{ vm.name }}"
