---
# ==============================================
# 1. Créer dossier temporaire pour templates
# ==============================================
- name: "Créer dossier temporaire pour les templates"
  file:
    path: "{{ proxmox_templates_tmp }}"
    state: directory
    mode: '0755'

# ==============================================
# 2. Télécharger les templates directement sur Proxmox
# ==============================================
- name: "Télécharger chaque template si absent"
  ansible.builtin.get_url:
    url: "{{ item.qcow2_url }}"
    dest: "{{ proxmox_templates_tmp }}/{{ item.qcow2_file }}"
    mode: '0644'
  loop: "{{ proxmox_templates }}"
  loop_control:
    label: "{{ item.name }}"

# ==============================================
# 3. Décompresser .bz2 si nécessaire
# ==============================================
- name: "Décompresser les images .bz2 si nécessaire"
  command: >
    bzip2 -dk {{ proxmox_templates_tmp }}/{{ item.qcow2_file }}
  args:
    creates: "{{ proxmox_templates_tmp }}/{{ item.qcow2_file | regex_replace('\\.bz2$', '') }}"
  when: item.qcow2_file is search('.bz2$')
  loop: "{{ proxmox_templates }}"
  loop_control:
    label: "{{ item.name }}"

# ==============================================
# 4. Créer VM pour template si absente
# ==============================================
- name: "Créer VM pour template si elle n'existe pas déjà"
  command: >
    qm create {{ item.vmid }}
      --name {{ item.hostname }}
      --memory {{ item.memory }}
      --cores {{ item.cores }}
      --ostype {{ item.ostype }}
      --net0 virtio,bridge=vmbr0
      --scsihw virtio-scsi-pci
      --onboot 1
  args:
    creates: "/etc/pve/nodes/{{ proxmox_node }}/qemu-server/{{ item.vmid }}.conf"
  loop: "{{ proxmox_templates }}"
  loop_control:
    label: "{{ item.name }}"

# ==============================================
# 5. Importer disque système et attacher en scsi0
# ==============================================
- name: "Importer disque système et attacher en scsi0"
  shell: |
    qm importdisk {{ item.vmid }} \
      {{ proxmox_templates_tmp }}/{{ item.qcow2_file | regex_replace('\.bz2$|\.gz$','') }} \
      {{ item.storage }}
  args:
    creates: "/var/lib/vz/images/{{ item.vmid }}"
  loop: "{{ proxmox_templates }}"
  loop_control:
    label: "{{ item.name }}"

# ==============================================
# 6. Configurer disque importé comme bootdisk
# ==============================================
- name: "Configurer disque importé comme bootdisk"
  shell: |
    DISK=$(ls /var/lib/vz/images/{{ item.vmid }}/ | grep -E '\.(raw|qcow2|img)$')
    qm set {{ item.vmid }} \
      --scsihw virtio-scsi-pci \
      --scsi0 {{ item.storage }}:{{ item.vmid }}/$DISK \
      --bootdisk scsi0 \
      --boot "order=scsi0"
  args:
    executable: /bin/bash
  loop: "{{ proxmox_templates }}"
  loop_control:
    label: "{{ item.name }}"

# ==============================================
# 7. Définir mot de passe root OPNsense (sans Cloud-Init)
# ==============================================
#- name: Définir mot de passe root OPNsense
#  include_tasks: opnsense-template.yml

# ==============================================
# 8. Ajouter disque Cloud-Init (uniquement Debian)
# ==============================================
- name: "Ajouter disque Cloud-Init pour les templates compatibles"
  command: >
    qm set {{ item.vmid }}
      --ide2 {{ item.storage }}:cloudinit
      --ciuser {{ cloudinit_user }}
      --cipassword {{ cloudinit_password }}
      --sshkeys "{{ bastion_key_path }}.pub"
      --citype nocloud
  when: item.cloudinit | default(false)
  loop: "{{ proxmox_templates }}"
  loop_control:
    label: "{{ item.name }}"

# ==============================================
# 9. Convertir VM en template
# ==============================================
- name: "Convertir VM en template"
  command: >
    qm template {{ item.vmid }}
  args:
    creates: "/etc/pve/nodes/{{ proxmox_node }}/qemu-server/{{ item.vmid }}.conf"
  loop: "{{ proxmox_templates }}"
  loop_control:
    label: "{{ item.name }}"
